BASE = ../../buildShared
SRC = test1
CC = $(BASE)/bin/clang
OPT = $(BASE)/bin/opt
#PASSLIB = $(BASE)/lib/LLVMDataConf.so
PASS = DataConf
#SAFESTACK = ../../llvm/projects/compiler-rt/lib/safestack/safestack.cc
#INC_DIR = ../../llvm/projects/compiler-rt/lib
CLANG = $(BASE)/bin/clang
LLC = $(BASE)/bin/llc
#LIB = $(BASE)/lib/clang/3.8.0/lib/linux/libclang_rt.safestack-x86_64.a

#all: sandbox nosandbox a.out
all:  a.out

<<<<<<< HEAD
a.out : test1.c
	$(CLANG) -g -mllvm -dataconf -mllvm -debug-only=DataConf test1.c 

#sandbox : test1.c
#	$(CLANG) -mllvm -dataconf -mllvm -debug-only=DataConf test1.c -o sandbox
#
#nosandbox : test1.c
#	$(CLANG) -mllvm -dataconf -mllvm -debug-only=DataConf -mllvm -dataconf-disable-sandbox test1.c -o nosandbox
=======
test1.ll : test1.c
	#$(CLANG) -fsanitize=safe-stack -mllvm -dataconf test1.c
	$(CLANG) -mllvm -dataconf test1.c
>>>>>>> 0ee3f86f4219ae3694449d7aaf6ebd6f0c4bc83f


#all : a.out
#
#$(SRC).ll : $(SRC).c
#	clang -S -emit-llvm $(SRC).c
#
#$(SRC).out.ll: $(SRC).ll
#	$(OPT) -S -debug -load $(PASSLIB) -$(PASS) $(SRC).ll > $(SRC).out.ll
#
#test.ll : $(SRC).out.ll
#	cp $(SRC).ll test.ll
#
#a.out : $(SRC).out.ll 
#	clang $(SRC).out.ll $(BASE)/lib/clang/3.8.0/lib/linux/libclang_rt.safestack-x86_64.a $(BASE)/lib/clang/3.8.0/lib/linux/libclang_rt.tsan-x86_64.a -lpthread
#
##safestack.ll : $(SAFESTACK)
##	clang++ -S -std=c++11 -emit-llvm $(SAFESTACK) -I $(INC_DIR)
#
#clean: 
#	rm $(SRC).ll test.ll
#
clean: 
	rm a.out test1.ll before.ll after.ll 
	


